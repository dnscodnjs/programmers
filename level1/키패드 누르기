import java.util.*;
import java.awt.Point;
class Solution {
    public String solution(int[] numbers, String hand) {
        int[][] keypad = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {-1, 0, -1}};

        Map<Integer, Point> keypadMap = new HashMap<>();
        for (int i = 0; i < keypad.length; i++) {
            for (int j = 0; j < keypad[i].length; j++) {
                keypadMap.put(keypad[i][j], new Point(i, j));
            }
        }

        StringBuilder sb = new StringBuilder();

        Point left = new Point(3,0);
        Point right = new Point(3,2);

        for (int n : numbers) {
            if (n == 1 || n == 4 || n == 7) {
                sb.append("L");
                left = keypadMap.get(n);
                //System.out.println("left: " + left);

            } else if (n == 3 || n == 6 || n == 9) {
                sb.append("R");
                right = keypadMap.get(n);
                //System.out.println("right: " + right);
            } else {
                Point now = keypadMap.get(n);
                int leftDistance = Math.abs(left.x - now.x) + Math.abs(left.y - now.y);
                int rightDistance = Math.abs(right.x - now.x) + Math.abs(right.y - now.y);
                if (leftDistance == rightDistance) {
                    if(hand.equals("right")) {
                        sb.append("R");
                        right = keypadMap.get(n);
                    }
                    else if(hand.equals("left")){
                        sb.append("L");
                        left = keypadMap.get(n);
                    }
                } else if (leftDistance > rightDistance){
                    sb.append("R");
                    right = keypadMap.get(n);
                    //System.out.println("right: " + left);
                }else {
                    sb.append("L");
                    left = keypadMap.get(n);
                    //System.out.println("left: " + right);
                }
            }
            //System.out.println("sb: " + sb.toString());
        }

        return sb.toString();

    }
}
